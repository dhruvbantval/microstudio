// Generated by CoffeeScript 2.7.0
(function() {
  this.Project = class Project {
    constructor(app, data) {
      var f, k, len1, ref;
      this.setSourceList = this.setSourceList.bind(this);
      this.setSpriteList = this.setSpriteList.bind(this);
      this.setMapList = this.setMapList.bind(this);
      this.setSoundList = this.setSoundList.bind(this);
      this.setMusicList = this.setMusicList.bind(this);
      this.setAssetList = this.setAssetList.bind(this);
      this.app = app;
      this.id = data.id;
      this.owner = data.owner;
      this.accepted = data.accepted;
      this.slug = data.slug;
      this.code = data.code;
      this.title = data.title;
      this.description = data.description;
      this.tags = data.tags;
      this.public = data.public;
      this.unlisted = data.unlisted;
      this.platforms = data.platforms;
      this.controls = data.controls;
      this.type = data.type;
      this.orientation = data.orientation;
      this.graphics = data.graphics || "M1";
      this.language = data.language || "microscript_v1_i";
      this.libs = data.libs || [];
      this.aspect = data.aspect;
      this.users = data.users;
      this.tabs = data.tabs;
      this.plugins = data.plugins;
      this.libraries = data.libraries;
      this.networking = data.networking;
      this.properties = data.properties || {};
      this.flags = data.flags || {};
      this.file_types = ["source", "sprite", "map", "asset", "sound", "music"];
      ref = this.file_types;
      for (k = 0, len1 = ref.length; k < len1; k++) {
        f = ref[k];
        this[`${f}_list`] = [];
        this[`${f}_table`] = {};
        this[`${f}_folder`] = new ProjectFolder(null, f);
      }
      this.locks = {};
      this.lock_time = {};
      this.friends = {};
      this.url = location.origin + `/${this.owner.nick}/${this.slug}/`;
      this.listeners = [];
      setInterval((() => {
        return this.checkLocks();
      }), 1000);
      this.pending_changes = [];
      this.onbeforeunload = null;
    }

    getFullURL() {
      if (this.public) {
        return this.url;
      } else {
        return location.origin + `/${this.owner.nick}/${this.slug}/${this.code}/`;
      }
    }

    addListener(lis) {
      return this.listeners.push(lis);
    }

    notifyListeners(change) {
      var k, len1, lis, ref;
      ref = this.listeners;
      for (k = 0, len1 = ref.length; k < len1; k++) {
        lis = ref[k];
        lis.projectUpdate(change);
      }
    }

    load() {
      this.updateSourceList();
      this.updateSpriteList();
      this.updateMapList();
      this.updateSoundList();
      this.updateMusicList();
      this.updateAssetList();
      return this.loadDoc();
    }

    loadDoc() {
      this.app.doc_editor.setDoc("");
      return this.app.readProjectFile(this.id, "doc/doc.md", (content) => {
        return this.app.doc_editor.setDoc(content);
      });
    }

    updateFileList(folder, callback) {
      return this.app.client.sendRequest({
        name: "list_project_files",
        project: this.app.project.id,
        folder: folder
      }, (msg) => {
        return this[callback](msg.files);
      });
    }

    updateSourceList() {
      return this.updateFileList("ms", "setSourceList");
    }

    updateSpriteList() {
      return this.updateFileList("sprites", "setSpriteList");
    }

    updateMapList() {
      return this.updateFileList("maps", "setMapList");
    }

    updateSoundList() {
      return this.updateFileList("sounds", "setSoundList");
    }

    updateMusicList() {
      return this.updateFileList("music", "setMusicList");
    }

    updateAssetList() {
      return this.updateFileList("assets", "setAssetList");
    }

    lockFile(file) {
      var lock;
      lock = this.lock_time[file];
      if ((lock != null) && Date.now() < lock) {
        return;
      }
      this.lock_time[file] = Date.now() + 2000;
      console.info(`locking file ${file}`);
      return this.app.client.sendRequest({
        name: "lock_project_file",
        project: this.id,
        file: file
      }, (msg) => {});
    }

    fileLocked(msg) {
      this.locks[msg.file] = {
        user: msg.user,
        time: Date.now() + 10000
      };
      this.friends[msg.user] = Date.now() + 120000;
      return this.notifyListeners("locks");
    }

    isLocked(file) {
      var lock;
      lock = this.locks[file];
      if ((lock != null) && Date.now() < lock.time) {
        return lock;
      } else {
        return false;
      }
    }

    checkLocks() {
      var change, file, lock, ref, ref1, time, user;
      change = false;
      ref = this.locks;
      for (file in ref) {
        lock = ref[file];
        if (Date.now() > lock.time) {
          delete this.locks[file];
          change = true;
        }
      }
      ref1 = this.friends;
      for (user in ref1) {
        time = ref1[user];
        if (Date.now() > time) {
          delete this.friends[user];
          change = true;
        }
      }
      if (change) {
        return this.notifyListeners("locks");
      }
    }

    changeSpriteName(old, name) {
      var changed, i, j, k, l, len1, map, n, ref, ref1, ref2, s;
      old = old.replace(/-/g, "/");
      ref = this.map_list;
      for (k = 0, len1 = ref.length; k < len1; k++) {
        map = ref[k];
        changed = false;
        for (i = l = 0, ref1 = map.width - 1; l <= ref1; i = l += 1) {
          for (j = n = 0, ref2 = map.height - 1; n <= ref2; j = n += 1) {
            s = map.get(i, j);
            if ((s != null) && s.length > 0) {
              s = s.split(":");
              if (s[0] === old) {
                changed = true;
                if (s[1] != null) {
                  map.set(i, j, name + ":" + s[1]);
                } else {
                  map.set(i, j, name);
                }
              }
            }
          }
        }
        if (changed) {
          this.app.client.sendRequest({
            name: "write_project_file",
            project: this.app.project.id,
            file: `maps/${map.name}.json`,
            content: map.save()
          }, (msg) => {});
        }
      }
    }

    changeMapName(old, name) {
      this.map_table[name] = this.map_table[old];
      return delete this.map_table[old];
    }

    fileUpdated(msg) {
      var name;
      if (msg.file.indexOf("ms/") === 0) {
        // Handle both .ms and .js files in the ms/ directory
        if (msg.file.indexOf(".ms") > 0) {
          name = msg.file.substring("ms/".length, msg.file.indexOf(".ms"));
        } else if (msg.file.indexOf(".js") > 0) {
          name = msg.file.substring("ms/".length, msg.file.indexOf(".js"));
        } else {
          name = msg.file.substring("ms/".length);
        }
        if (this.source_table[name] != null) {
          return this.source_table[name].reload();
        } else {
          return this.updateSourceList();
        }
      } else if (msg.file === "doc/doc.md") {
        return this.app.doc_editor.setDoc(msg.content);
      } else if (msg.file.indexOf("sprites/") === 0) {
        name = msg.file.substring("sprites/".length, msg.file.indexOf(".png"));
        if (this.sprite_table[name] != null) {
          if (msg.properties != null) {
            this.sprite_table[name].properties = msg.properties;
            if (msg.properties.fps != null) {
              this.sprite_table[name].fps = msg.properties.fps;
            }
          }
          return this.sprite_table[name].reload(() => {
            if (name === this.app.sprite_editor.selected_sprite) {
              return this.app.sprite_editor.currentSpriteUpdated();
            }
          });
        } else {
          return this.updateSpriteList();
        }
      } else if (msg.file.indexOf("maps/") === 0) {
        name = msg.file.substring("maps/".length, msg.file.indexOf(".json"));
        if (this.map_table[name] != null) {
          return this.map_table[name].loadFile();
        } else {
          return this.updateMapList();
        }
      } else if (msg.file.indexOf("sounds/") === 0) {
        name = msg.file.substring("sounds/".length, msg.file.length).split(".")[0];
        if (this.sound_table[name] == null) {
          return this.updateSoundList();
        }
      } else if (msg.file.indexOf("music/") === 0) {
        name = msg.file.substring("music/".length, msg.file.length).split(".")[0];
        if (this.music_table[name] == null) {
          return this.updateMusicList();
        }
      } else if (msg.file.indexOf("assets/") === 0) {
        name = msg.file.substring("assets/".length, msg.file.length).split(".")[0];
        if (this.asset_table[name] == null) {
          return this.updateAssetList();
        }
      }
    }

    fileDeleted(msg) {
      if (msg.file.indexOf("ms/") === 0) {
        return this.updateSourceList();
      } else if (msg.file.indexOf("sprites/") === 0) {
        return this.updateSpriteList();
      } else if (msg.file.indexOf("maps/") === 0) {
        return this.updateMapList();
      } else if (msg.file.indexOf("sounds/") === 0) {
        return this.updateSoundList();
      } else if (msg.file.indexOf("music/") === 0) {
        return this.updateMusicList();
      }
    }

    optionsUpdated(data) {
      this.slug = data.slug;
      this.title = data.title;
      this.public = data.public;
      this.platforms = data.platforms;
      this.controls = data.controls;
      this.type = data.type;
      this.orientation = data.orientation;
      return this.aspect = data.aspect;
    }

    addSprite(sprite) {
      var s;
      s = new ProjectSprite(this, sprite.file, null, null, sprite.properties, sprite.size);
      this.sprite_table[s.name] = s;
      this.sprite_list.push(s);
      this.sprite_folder.push(s);
      return s;
    }

    getSprite(name) {
      return this.sprite_table[name];
    }

    createSprite(width, height, name = "sprite") {
      var count, filename, sprite;
      if (this.getSprite(name)) {
        count = 2;
        while (true) {
          filename = `${name}${count++}`;
          if (this.getSprite(filename) == null) {
            break;
          }
        }
      } else {
        filename = name;
      }
      sprite = new ProjectSprite(this, filename + ".png", width, height);
      this.sprite_table[sprite.name] = sprite;
      this.sprite_list.push(sprite);
      this.sprite_folder.push(sprite);
      this.notifyListeners("spritelist");
      return sprite;
    }

    importComponentData(callback) {
      return this.app.client.sendRequest({
        name: "read_component_data"
      }, (msg) => {
        if (msg.data) {
          this.processComponentData(msg.data);
          if (callback != null) {
            return callback();
          }
        }
      });
    }

    processComponentData(data) {
      if (data.entities || data.objects) {
        return this.generateComponentCode(data);
      }
    }

    generateComponentCode(data) {
      // Generate component data file and functions library
      console.info("Starting component code generation...");
      console.info("Data received:", data);
      
      // Check project language
      if (this.language === "javascript") {
        console.info("✅ Project language is JavaScript - generating .js files");
        // Generate all three files as .js files
        console.info("Generating component_data.js...");
        this.generateComponentDataFile(data);
        console.info("Generating functions.js...");
        this.generateFunctionsLibrary(data);
        console.info("Generating main.js...");
        this.generateMainFileTemplate();
      } else {
        console.warn(`⚠️ Project language is '${this.language}' - generating microScript-compatible .ms files`);
        // Generate microScript-compatible versions as .ms files
        console.info("Generating component_data.ms...");
        this.generateMicroScriptComponentDataFile(data);
        console.info("Generating functions.ms...");
        this.generateMicroScriptFunctionsLibrary(data);
        console.info("Generating main.ms...");
        this.generateMicroScriptMainFileTemplate();
      }
      
      // Show success message after a short delay to ensure files are created
      return setTimeout(() => {
        if (this.language === "javascript") {
          return console.info("✅ JavaScript component system files generated successfully!");
        } else {
          console.info("✅ microScript component system files generated successfully!");
          return console.info("💡 Tip: Change project language to 'JavaScript' in project settings for better JavaScript support");
        }
      }, 1000);
    }

    generateComponentDataFile(data) {
      var codeLines, component, key, objLines, objectData, objectEntries, objectName, objectsData, ref, ref1, ref2, ref3, ref4, value, values;
      // Generate clean component data in JavaScript for microStudio
      codeLines = [];
      codeLines.push("// Component data from db.json");
      codeLines.push("// This object is globally available across all files in microStudio");
      codeLines.push("component_objects = {");
      // Use entities if available, fallback to objects for backwards compatibility
      objectsData = data.entities || data.objects;
      if (objectsData) {
        objectEntries = [];
        for (objectName in objectsData) {
          objectData = objectsData[objectName];
          objLines = [];
          objLines.push(`  ${objectName}: {`);
          objLines.push(`    shape: \"${objectData.shape}\",`);
          objLines.push(`    x: ${((ref = objectData.position) != null ? ref.x : void 0) || 0},`);
          objLines.push(`    y: ${((ref1 = objectData.position) != null ? ref1.y : void 0) || 0},`);
          if (objectData.shape === "rectangle" && objectData.size) {
            objLines.push(`    w: ${objectData.size.width},`);
            objLines.push(`    h: ${objectData.size.height},`);
          } else if (objectData.shape === "circle" && objectData.radius) {
            objLines.push(`    r: ${objectData.radius},`);
          }
          if ((ref2 = objectData.variableValues) != null ? (ref3 = ref2.visual) != null ? ref3.color : void 0 : void 0) {
            objLines.push(`    color: \"${objectData.variableValues.visual.color}\",`);
          }
          if (objectData.components && objectData.components.length > 0) {
            objLines.push(`    components: ${JSON.stringify(objectData.components)},`);
          }
          if (objectData.variableValues) {
            objLines.push("    data: {");
            ref4 = objectData.variableValues;
            for (component in ref4) {
              values = ref4[component];
              objLines.push(`      ${component}: {`);
              for (key in values) {
                value = values[key];
                if (typeof value === "string") {
                  objLines.push(`        ${key}: \"${value}\",`);
                } else {
                  objLines.push(`        ${key}: ${JSON.stringify(value)},`);
                }
              }
              objLines.push("      },");
            }
            objLines.push("    },");
          }
          objLines.push("  },");
          objectEntries.push(objLines.join("\n"));
        }
        codeLines.push(objectEntries.join("\n"));
      }
      codeLines.push("};");
      return this.insertCodeIntoFile(codeLines.join("\n"), "component_data", "js");
    }

    generateFunctionsLibrary(data) {
      var lines;
      // Generate functions library in JavaScript for microStudio
      lines = [];
      lines.push("// Component Functions Library");
      lines.push("// All functions are globally available across files in microStudio");
      lines.push("drawObject = function(id, customX, customY) {");
      lines.push("  var obj = component_objects[id];");
      lines.push("  if (!obj) {");
      lines.push("    // Debug: Object not found");
      lines.push("    return;");
      lines.push("  }");
      lines.push("");
      lines.push("  var x = customX !== undefined ? customX : obj.x;");
      lines.push("  var y = customY !== undefined ? customY : obj.y;");
      lines.push("");
      lines.push("  // Debug: Log what we're trying to draw");
      lines.push("  // Temporarily commented out to avoid spam: print('Drawing object: ' + id + ' at (' + x + ', ' + y + ')');");
      lines.push("");
      lines.push("  if (obj.color) screen.setColor(obj.color);");
      lines.push("");
      lines.push("  // Try to draw sprite with object ID as sprite name");
      lines.push("  try {");
      lines.push("    screen.drawSprite(id, x, y);");
      lines.push("  } catch (e) {");
      lines.push("    // If sprite doesn't exist, draw a simple rectangle as fallback");
      lines.push("    var w = obj.w || 20;");
      lines.push("    var h = obj.h || 20;");
      lines.push("    var r = obj.r || 10;");
      lines.push("    ");
      lines.push("    screen.setColor(obj.color || '#FF0000');");
      lines.push("    ");
      lines.push("    if (obj.shape === 'circle') {");
      lines.push("      screen.fillRound(x, y, r, r);");
      lines.push("    } else {");
      lines.push("      screen.fillRect(x, y, w, h);");
      lines.push("    }");
      lines.push("  }");
      lines.push("}");
      lines.push("");
      lines.push("applyPhysics = function(id, dt) {");
      lines.push("  var obj = component_objects[id];");
      lines.push("  if (obj && obj.data && obj.data.physics) {");
      lines.push("    var physics = obj.data.physics;");
      lines.push("");
      lines.push("    if (physics.gravity) obj.y += physics.gravity * dt;");
      lines.push("");
      lines.push("    if (physics.friction && obj.velocity_x !== undefined) {");
      lines.push("      obj.velocity_x *= (1 - physics.friction * dt);");
      lines.push("    }");
      lines.push("  }");
      lines.push("}");
      lines.push("");
      lines.push("applyAllPhysics = function(dt) {");
      lines.push("  var keys = Object.keys(component_objects);");
      lines.push("  for (var i = 0; i < keys.length; i++) {");
      lines.push("    applyPhysics(keys[i], dt);");
      lines.push("  }");
      lines.push("}");
      lines.push("");
      lines.push("getObject = function(id) {");
      lines.push("  return component_objects[id];");
      lines.push("}");
      lines.push("");
      lines.push("getObjectsWithComponent = function(componentName) {");
      lines.push("  var result = [];");
      lines.push("  var keys = Object.keys(component_objects);");
      lines.push("  for (var i = 0; i < keys.length; i++) {");
      lines.push("    var obj = component_objects[keys[i]];");
      lines.push("    if (obj.components && obj.components.indexOf(componentName) >= 0) {");
      lines.push("      result.push(keys[i]);");
      lines.push("    }");
      lines.push("  }");
      lines.push("  return result;");
      lines.push("}");
      lines.push("");
      lines.push("drawAllObjects = function() {");
      lines.push("  var keys = Object.keys(component_objects);");
      lines.push("  for (var i = 0; i < keys.length; i++) {");
      lines.push("    drawObject(keys[i]);");
      lines.push("  }");
      lines.push("}");
      return this.insertCodeIntoFile(lines.join("\n"), "functions", "js");
    }

    generateMicroScriptComponentDataFile(data) {
      var codeLines, component, key, objectData, objectName, objectsData, ref, ref1, ref2, ref3, ref4, value, values;
      // Generate clean component data in microScript format for microStudio
      codeLines = [];
      codeLines.push("// Component data from db.json");
      codeLines.push("// This object is globally available across all files in microStudio");
      codeLines.push("component_objects = object");
      // Use entities if available, fallback to objects for backwards compatibility
      objectsData = data.entities || data.objects;
      if (objectsData) {
        for (objectName in objectsData) {
          objectData = objectsData[objectName];
          codeLines.push(`  ${objectName} = object`);
          codeLines.push(`    shape = \"${objectData.shape}\"`);
          codeLines.push(`    x = ${((ref = objectData.position) != null ? ref.x : void 0) || 0}`);
          codeLines.push(`    y = ${((ref1 = objectData.position) != null ? ref1.y : void 0) || 0}`);
          if (objectData.shape === "rectangle" && objectData.size) {
            codeLines.push(`    w = ${objectData.size.width}`);
            codeLines.push(`    h = ${objectData.size.height}`);
          } else if (objectData.shape === "circle" && objectData.radius) {
            codeLines.push(`    r = ${objectData.radius}`);
          }
          if ((ref2 = objectData.variableValues) != null ? (ref3 = ref2.visual) != null ? ref3.color : void 0 : void 0) {
            codeLines.push(`    color = \"${objectData.variableValues.visual.color}\"`);
          }
          if (objectData.components && objectData.components.length > 0) {
            codeLines.push(`    components = ${JSON.stringify(objectData.components)}`);
          }
          if (objectData.variableValues) {
            codeLines.push("    data = object");
            ref4 = objectData.variableValues;
            for (component in ref4) {
              values = ref4[component];
              codeLines.push(`      ${component} = object`);
              for (key in values) {
                value = values[key];
                if (typeof value === "string") {
                  codeLines.push(`        ${key} = \"${value}\"`);
                } else {
                  codeLines.push(`        ${key} = ${JSON.stringify(value)}`);
                }
              }
              codeLines.push("      end");
            }
            codeLines.push("    end");
          }
          codeLines.push("  end");
        }
      }
      codeLines.push("end");
      return this.insertCodeIntoFile(codeLines.join("\n"), "component_data", "ms");
    }

    generateMicroScriptFunctionsLibrary(data) {
      var lines;
      // Generate functions library in microScript for microStudio
      lines = [];
      lines.push("// Component Functions Library");
      lines.push("// All functions are globally available across files in microStudio");
      lines.push("");
      lines.push("drawObject = function(id, customX, customY)");
      lines.push("  obj = component_objects[id]");
      lines.push("  if not obj then return end");
      lines.push("");
      lines.push("  x = if customX != null then customX else obj.x end");
      lines.push("  y = if customY != null then customY else obj.y end");
      lines.push("");
      lines.push("  if obj.color then screen.setColor(obj.color) end");
      lines.push("");
      lines.push("  // Use object ID as sprite name");
      lines.push("  screen.drawSprite(id, x, y)");
      lines.push("end");
      lines.push("");
      lines.push("applyPhysics = function(id, dt)");
      lines.push("  obj = component_objects[id]");
      lines.push("  if obj and obj.data and obj.data.physics then");
      lines.push("    physics = obj.data.physics");
      lines.push("");
      lines.push("    if physics.gravity then obj.y += physics.gravity * dt end");
      lines.push("");
      lines.push("    if physics.friction and obj.velocity_x != null then");
      lines.push("      obj.velocity_x *= (1 - physics.friction * dt)");
      lines.push("    end");
      lines.push("  end");
      lines.push("end");
      lines.push("");
      lines.push("applyAllPhysics = function(dt)");
      lines.push("  for id in system.keys(component_objects)");
      lines.push("    applyPhysics(id, dt)");
      lines.push("  end");
      lines.push("end");
      lines.push("");
      lines.push("getObject = function(id)");
      lines.push("  return component_objects[id]");
      lines.push("end");
      lines.push("");
      lines.push("getObjectsWithComponent = function(componentName)");
      lines.push("  result = []");
      lines.push("  for id in system.keys(component_objects)");
      lines.push("    obj = component_objects[id]");
      lines.push("    if obj.components and obj.components.indexOf(componentName) >= 0 then");
      lines.push("      result.push(id)");
      lines.push("    end");
      lines.push("  end");
      lines.push("  return result");
      lines.push("end");
      lines.push("");
      lines.push("drawAllObjects = function()");
      lines.push("  for id in system.keys(component_objects)");
      lines.push("    drawObject(id)");
      lines.push("  end");
      lines.push("end");
      return this.insertCodeIntoFile(lines.join("\n"), "functions", "ms");
    }

    generateMainFileTemplate() {
      var lines;
      // Generate a clean main.js template for microStudio
      lines = [];
      lines.push("// Main game logic - uses component_objects and functions from other files");
      lines.push("// In microStudio, all files are automatically available globally");
      lines.push("");
      lines.push("init = function() {");
      lines.push("  // Initialization code here");
      lines.push("  // Debug: Check if component system is working");
      lines.push("  if (typeof component_objects !== 'undefined') {");
      lines.push("    // Component system initialized successfully");
      lines.push("  } else {");
      lines.push("    // Component system not found");
      lines.push("  }");
      lines.push("}");
      lines.push("");
      lines.push("update = function() {");
      lines.push("  // Update physics and game logic");
      lines.push("  applyAllPhysics(1/60);  // 60 FPS");
      lines.push("}");
      lines.push("");
      lines.push("draw = function() {");
      lines.push("  screen.clear();");
      lines.push("  ");
      lines.push("  // Set white color for drawing");
      lines.push("  screen.setColor('#FFFFFF');");
      lines.push("  ");
      lines.push("  // Draw all objects");
      lines.push("  drawAllObjects();");
      lines.push("  ");
      lines.push("  // Or draw specific objects:");
      lines.push("  // drawObject('rect1');");
      lines.push("  // drawObject('circle1', 150, 200);  // custom position");
      lines.push("}");
      return this.insertCodeIntoFile(lines.join("\n"), "main", "js");
    }

    addSource(file) {
      var s;
      s = new ProjectSource(this, file.file, file.size);
      this.source_table[s.name] = s;
      this.source_list.push(s);
      this.source_folder.push(s);
      return s;
    }

    getSource(name) {
      return this.source_table[name];
    }

    createSource(basename = "source", fileType = "ms") {
      var count, fileExtension, filename, source;
      count = 2;
      filename = basename;
      while (this.getSource(filename) != null) {
        filename = `${basename}${count++}`;
      }
      fileExtension = fileType === "js" ? "js" : "ms";
      source = new ProjectSource(this, filename + `.${fileExtension}`);
      source.fetched = true;
      this.source_table[source.name] = source;
      this.source_list.push(source);
      this.source_folder.push(source);
      this.notifyListeners("sourcelist");
      return source;
    }

    getFullSource() {
      var k, len1, ref, res, s;
      res = "";
      ref = this.source_list;
      for (k = 0, len1 = ref.length; k < len1; k++) {
        s = ref[k];
        res += s + "\n";
      }
      return res;
    }

    setFileList(list, target_list, target_table, get, add, item_id) {
      var f, folder, i, k, l, len1, len2, li, n, notification, ref, s;
      notification = item_id + "list";
      li = [];
      for (k = 0, len1 = list.length; k < len1; k++) {
        f = list[k];
        li.push(f.file);
      }
      folder = this[item_id + "_folder"];
      folder.removeNoMatch(li);
//@[item_id+"_folder"] = new ProjectFolder(null,item_id)
      for (i = l = ref = target_list.length - 1; l >= 0; i = l += -1) {
        s = target_list[i];
        if (li.indexOf(s.filename) < 0) {
          target_list.splice(i, 1);
          delete target_table[s.name];
        }
      }
      for (n = 0, len2 = list.length; n < len2; n++) {
        s = list[n];
        if (!this[get](s.file.split(".")[0])) {
          this[add](s);
        }
      }
      folder.removeEmptyFolders();
      folder.sort();
      return this.notifyListeners(notification);
    }

    setSourceList(list) {
      return this.setFileList(list, this.source_list, this.source_table, "getSource", "addSource", "source");
    }

    setSpriteList(list) {
      return this.setFileList(list, this.sprite_list, this.sprite_table, "getSprite", "addSprite", "sprite");
    }

    setMapList(list) {
      return this.setFileList(list, this.map_list, this.map_table, "getMap", "addMap", "map");
    }

    setSoundList(list) {
      return this.setFileList(list, this.sound_list, this.sound_table, "getSound", "addSound", "sound");
    }

    setMusicList(list) {
      return this.setFileList(list, this.music_list, this.music_table, "getMusic", "addMusic", "music");
    }

    setAssetList(list) {
      return this.setFileList(list, this.asset_list, this.asset_table, "getAsset", "addAsset", "asset");
    }

    addMap(file) {
      var m;
      m = new ProjectMap(this, file.file, file.size);
      this.map_table[m.name] = m;
      this.map_list.push(m);
      this.map_folder.push(m);
      return m;
    }

    getMap(name) {
      return this.map_table[name];
    }

    addAsset(file) {
      var m;
      m = new ProjectAsset(this, file.file, file.size);
      this.asset_table[m.name] = m;
      this.asset_list.push(m);
      this.asset_folder.push(m);
      return m;
    }

    getAsset(name) {
      return this.asset_table[name];
    }

    createMap(basename = "map") {
      var count, m, name;
      name = basename;
      count = 2;
      while (this.getMap(name)) {
        name = `${basename}${count++}`;
      }
      m = this.addMap({
        file: name + ".json",
        size: 0
      });
      this.notifyListeners("maplist");
      return m;
    }

    createSound(name = "sound", thumbnail, size) {
      var count, filename, sound;
      if (this.getSound(name)) {
        count = 2;
        while (true) {
          filename = `${name}${count++}`;
          if (this.getSound(filename) == null) {
            break;
          }
        }
      } else {
        filename = name;
      }
      sound = new ProjectSound(this, filename + ".wav", size);
      if (thumbnail) {
        sound.thumbnail_url = thumbnail;
      }
      this.sound_table[sound.name] = sound;
      this.sound_list.push(sound);
      this.sound_folder.push(sound);
      this.notifyListeners("soundlist");
      return sound;
    }

    addSound(file) {
      var m;
      m = new ProjectSound(this, file.file, file.size);
      this.sound_table[m.name] = m;
      this.sound_list.push(m);
      this.sound_folder.push(m);
      return m;
    }

    getSound(name) {
      return this.sound_table[name];
    }

    createMusic(name = "music", thumbnail, size) {
      var count, filename, music;
      if (this.getMusic(name)) {
        count = 2;
        while (true) {
          filename = `${name}${count++}`;
          if (this.getMusic(filename) == null) {
            break;
          }
        }
      } else {
        filename = name;
      }
      music = new ProjectMusic(this, filename + ".mp3", size);
      if (thumbnail) {
        music.thumbnail_url = thumbnail;
      }
      this.music_table[music.name] = music;
      this.music_list.push(music);
      this.music_folder.push(music);
      this.notifyListeners("musiclist");
      return music;
    }

    addMusic(file) {
      var m;
      m = new ProjectMusic(this, file.file, file.size);
      this.music_table[m.name] = m;
      this.music_list.push(m);
      this.music_folder.push(m);
      return m;
    }

    getMusic(name) {
      return this.music_table[name];
    }

    createAsset(name = "asset", thumbnail, size, ext) {
      var asset, count, filename;
      if (this.getAsset(name)) {
        count = 2;
        while (true) {
          filename = `${name}${count++}`;
          if (this.getAsset(filename) == null) {
            break;
          }
        }
      } else {
        filename = name;
      }
      asset = new ProjectAsset(this, filename + `.${ext}`, size);
      if (thumbnail) {
        asset.thumbnail_url = thumbnail;
      }
      this.asset_table[asset.name] = asset;
      this.asset_list.push(asset);
      this.asset_folder.push(asset);
      this.notifyListeners("assetlist");
      return asset;
    }

    setTitle(title) {
      this.title = title;
      return this.notifyListeners("title");
    }

    setSlug(slug) {
      this.slug = slug;
      return this.notifyListeners("slug");
    }

    setCode(code1) {
      this.code = code1;
      return this.notifyListeners("code");
    }

    setType(type1) {
      this.type = type1;
    }

    setOrientation(orientation) {
      this.orientation = orientation;
    }

    //window.dispatchEvent(new Event('resize'))
    setAspect(aspect) {
      this.aspect = aspect;
    }

    //window.dispatchEvent(new Event('resize'))
    setGraphics(graphics) {
      this.graphics = graphics;
    }

    //window.dispatchEvent(new Event('resize'))
    setLanguage(language) {
      this.language = language;
    }

    //window.dispatchEvent(new Event('resize'))
    addPendingChange(item) {
      if (this.pending_changes.indexOf(item) < 0) {
        this.pending_changes.push(item);
      }
      if (this.onbeforeunload == null) {
        this.onbeforeunload = (event) => {
          event.preventDefault();
          event.returnValue = "You have pending unsaved changed.";
          this.savePendingChanges();
          return event.returnValue;
        };
        return window.addEventListener("beforeunload", this.onbeforeunload);
      }
    }

    removePendingChange(item) {
      var index;
      index = this.pending_changes.indexOf(item);
      if (index >= 0) {
        this.pending_changes.splice(index, 1);
      }
      if (this.pending_changes.length === 0) {
        if (this.onbeforeunload != null) {
          window.removeEventListener("beforeunload", this.onbeforeunload);
          return this.onbeforeunload = null;
        }
      }
    }

    savePendingChanges(callback) {
      var save;
      if (this.pending_changes.length > 0) {
        save = this.pending_changes.splice(0, 1)[0];
        return save.forceSave(() => {
          return this.savePendingChanges(callback);
        });
      } else {
        if (callback != null) {
          return callback();
        }
      }
    }

    getSize() {
      var k, l, len1, len2, ref, s, size, t, type;
      size = 0;
      ref = this.file_types;
      for (k = 0, len1 = ref.length; k < len1; k++) {
        type = ref[k];
        t = this[`${type}_list`];
        for (l = 0, len2 = t.length; l < len2; l++) {
          s = t[l];
          size += s.size;
        }
      }
      return size;
    }

    writeFile(name, content, options) {
      var folder, i, k, ref;
      name = name.split("/");
      folder = name[0];
      for (i = k = 0, ref = name.length - 1; (0 <= ref ? k <= ref : k >= ref); i = 0 <= ref ? ++k : --k) {
        name[i] = RegexLib.fixFilename(name[i]);
      }
      name = name.slice(1).join("-");
      switch (folder) {
        case "ms":
          return this.writeSourceFile(name, content);
        case "sprites":
          return this.writeSpriteFile(name, content, options.frames, options.fps);
        case "maps":
          return this.writeMapFile(name, content);
        case "sounds":
          return this.writeSoundFile(name, content);
        case "music":
          return this.writeMusicFile(name, content);
        case "assets":
          return this.writeAssetFile(name, content, options.ext);
      }
    }

    writeSourceFile(name, content) {
      return this.app.client.sendRequest({
        name: "write_project_file",
        project: this.id,
        file: `ms/${name}.ms`,
        content: content
      }, (msg) => {
        return this.updateSourceList();
      });
    }

    writeSoundFile(name, content) {
      var audioContext, base64ToArrayBuffer;
      base64ToArrayBuffer = function(base64) {
        var binary_string, bytes, i, k, len, ref;
        binary_string = window.atob(base64);
        len = binary_string.length;
        bytes = new Uint8Array(len);
        for (i = k = 0, ref = len - 1; k <= ref; i = k += 1) {
          bytes[i] = binary_string.charCodeAt(i);
        }
        return bytes.buffer;
      };
      audioContext = new AudioContext();
      return audioContext.decodeAudioData(base64ToArrayBuffer(content), (decoded) => {
        var thumbnailer;
        console.info(decoded);
        thumbnailer = new SoundThumbnailer(decoded, 96, 64);
        return this.app.client.sendRequest({
          name: "write_project_file",
          project: this.id,
          file: `sounds/${name}.wav`,
          properties: {},
          content: content,
          thumbnail: thumbnailer.canvas.toDataURL().split(",")[1]
        }, (msg) => {
          console.info(msg);
          return this.updateSoundList();
        });
      });
    }

    writeMusicFile(name, content) {
      var audioContext, base64ToArrayBuffer;
      base64ToArrayBuffer = function(base64) {
        var binary_string, bytes, i, k, len, ref;
        binary_string = window.atob(base64);
        len = binary_string.length;
        bytes = new Uint8Array(len);
        for (i = k = 0, ref = len - 1; k <= ref; i = k += 1) {
          bytes[i] = binary_string.charCodeAt(i);
        }
        return bytes.buffer;
      };
      audioContext = new AudioContext();
      return audioContext.decodeAudioData(base64ToArrayBuffer(content), (decoded) => {
        var thumbnailer;
        console.info(decoded);
        thumbnailer = new SoundThumbnailer(decoded, 192, 64, "hsl(200,80%,60%)");
        return this.app.client.sendRequest({
          name: "write_project_file",
          project: this.id,
          file: `music/${name}.mp3`,
          properties: {},
          content: content,
          thumbnail: thumbnailer.canvas.toDataURL().split(",")[1]
        }, (msg) => {
          console.info(msg);
          return this.updateMusicList();
        });
      });
    }

    writeSpriteFile(name, content, frames, fps) {
      return this.app.client.sendRequest({
        name: "write_project_file",
        project: this.id,
        file: `sprites/${name}.png`,
        properties: {
          frames: frames,
          fps: fps
        },
        content: content
      }, (msg) => {
        return this.fileUpdated({
          file: `sprites/${name}.png`,
          properties: {
            frames: frames,
            fps: fps
          }
        });
      });
    }

    // @updateSpriteList()
    writeMapFile(name, content) {
      return this.app.client.sendRequest({
        name: "write_project_file",
        project: this.id,
        file: `maps/${name}.json`,
        content: content
      }, (msg) => {
        this.fileUpdated({
          file: `maps/${name}.json`
        });
        return this.updateMapList();
      });
    }

    writeAssetFile(name, content, ext) {
      var send, thumbnail;
      if (ext === "json") {
        content = JSON.stringify(content);
      }
      thumbnail = void 0;
      if (ext === "txt" || ext === "csv" || ext === "json" || ext === "obj") {
        thumbnail = this.app.assets_manager.text_viewer.createThumbnail(content, ext);
        thumbnail = thumbnail.toDataURL().split(",")[1];
      }
      if (ext === "obj") {
        content = btoa(content);
      }
      send = () => {
        return this.app.client.sendRequest({
          name: "write_project_file",
          project: this.id,
          file: `assets/${name}.${ext}`,
          content: content,
          thumbnail: thumbnail
        }, (msg) => {
          return this.updateAssetList();
        });
      };
      if (ext === "png" || ext === "jpg") {
        this.app.assets_manager.image_viewer.createThumbnail(content, (canvas) => {
          thumbnail = canvas.toDataURL().split(",")[1];
          content = content.split(",")[1];
          return send();
        });
        return;
      }
      return send();
    }

    insertCodeIntoFile(code, filename, fileType = "ms") {
      var fileExtension;
      // Create or overwrite the file directly on the server
      fileExtension = fileType === "js" ? "js" : "ms";
      
      // Save the file directly to the server
      return this.app.client.sendRequest({
        name: "write_project_file",
        project: this.id,
        file: `ms/${filename}.${fileExtension}`,
        content: code
      }, (msg) => {
        console.info(`Created file: ${filename}.${fileExtension}`);
        
        // Manually trigger file updated to ensure proper handling
        this.fileUpdated({
          file: `ms/${filename}.${fileExtension}`,
          content: code
        });
        
        // If this is the main file, switch to it in the editor
        if (filename === "main") {
          return setTimeout(() => {
            var source;
            // Find and select the new file
            source = this.getSource(filename);
            if (source && this.app.editor) {
              return this.app.editor.setSelectedItem(source.name);
            }
          }, 500);
        }
      });
    }

  };

}).call(this);
